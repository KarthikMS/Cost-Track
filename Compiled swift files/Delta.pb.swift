// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Delta.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct DocumentDeltas {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delta: [DocumentDelta] = []

  var lastSavedVersion: Int32 {
    get {return _lastSavedVersion ?? 0}
    set {_lastSavedVersion = newValue}
  }
  /// Returns true if `lastSavedVersion` has been explicitly set.
  var hasLastSavedVersion: Bool {return self._lastSavedVersion != nil}
  /// Clears the value of `lastSavedVersion`. Subsequent reads from it will return its default value.
  mutating func clearLastSavedVersion() {self._lastSavedVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lastSavedVersion: Int32? = nil
}

struct DocumentDelta {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Presentation version that the delta is intended to be applied to.
  var version: Int32 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  /// Operations included in this delta
  var docOp: [DocumentOperation] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _version: Int32? = nil
}

struct DocumentOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mutateDocument: DocumentOperation.MutateDocument {
    get {return _storage._mutateDocument ?? DocumentOperation.MutateDocument()}
    set {_uniqueStorage()._mutateDocument = newValue}
  }
  /// Returns true if `mutateDocument` has been explicitly set.
  var hasMutateDocument: Bool {return _storage._mutateDocument != nil}
  /// Clears the value of `mutateDocument`. Subsequent reads from it will return its default value.
  mutating func clearMutateDocument() {_storage._mutateDocument = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Mutates a document.
  struct MutateDocument {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// this should not be confused with the presenation id. this mutateDocumentId can be a slide Id / master Id / presentation Id
    var mDocID: String {
      get {return _storage._mDocID ?? String()}
      set {_uniqueStorage()._mDocID = newValue}
    }
    /// Returns true if `mDocID` has been explicitly set.
    var hasMDocID: Bool {return _storage._mDocID != nil}
    /// Clears the value of `mDocID`. Subsequent reads from it will return its default value.
    mutating func clearMDocID() {_storage._mDocID = nil}

    var contentOp: DocumentContentOperation {
      get {return _storage._contentOp ?? DocumentContentOperation()}
      set {_uniqueStorage()._contentOp = newValue}
    }
    /// Returns true if `contentOp` has been explicitly set.
    var hasContentOp: Bool {return _storage._contentOp != nil}
    /// Clears the value of `contentOp`. Subsequent reads from it will return its default value.
    mutating func clearContentOp() {_storage._contentOp = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DocumentContentOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var component: [DocumentContentOperation.Component] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Component {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var opType: DocumentContentOperation.Component.OperationType {
      get {return _storage._opType ?? .insert}
      set {_uniqueStorage()._opType = newValue}
    }
    /// Returns true if `opType` has been explicitly set.
    var hasOpType: Bool {return _storage._opType != nil}
    /// Clears the value of `opType`. Subsequent reads from it will return its default value.
    mutating func clearOpType() {_storage._opType = nil}

    /// The first position in the fields will hold the root element.
    var fields: String {
      get {return _storage._fields ?? String()}
      set {_uniqueStorage()._fields = newValue}
    }
    /// Returns true if `fields` has been explicitly set.
    var hasFields: Bool {return _storage._fields != nil}
    /// Clears the value of `fields`. Subsequent reads from it will return its default value.
    mutating func clearFields() {_storage._fields = nil}

    var value: DocumentContentOperation.Component.Value {
      get {return _storage._value ?? DocumentContentOperation.Component.Value()}
      set {_uniqueStorage()._value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool {return _storage._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() {_storage._value = nil}

    var custom: DocumentContentOperation.Component.Custom {
      get {return _storage._custom ?? DocumentContentOperation.Component.Custom()}
      set {_uniqueStorage()._custom = newValue}
    }
    /// Returns true if `custom` has been explicitly set.
    var hasCustom: Bool {return _storage._custom != nil}
    /// Clears the value of `custom`. Subsequent reads from it will return its default value.
    mutating func clearCustom() {_storage._custom = nil}

    /// in case of REORDER operation, this will hold the new index position
    var ni: Int32 {
      get {return _storage._ni ?? 0}
      set {_uniqueStorage()._ni = newValue}
    }
    /// Returns true if `ni` has been explicitly set.
    var hasNi: Bool {return _storage._ni != nil}
    /// Clears the value of `ni`. Subsequent reads from it will return its default value.
    mutating func clearNi() {_storage._ni = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    enum OperationType: SwiftProtobuf.Enum {
      typealias RawValue = Int
      case insert // = 1
      case update // = 2
      case delete // = 3
      case custom // = 4
      case reorder // = 5

      init() {
        self = .insert
      }

      init?(rawValue: Int) {
        switch rawValue {
        case 1: self = .insert
        case 2: self = .update
        case 3: self = .delete
        case 4: self = .custom
        case 5: self = .reorder
        default: return nil
        }
      }

      var rawValue: Int {
        switch self {
        case .insert: return 1
        case .update: return 2
        case .delete: return 3
        case .custom: return 4
        case .reorder: return 5
        }
      }

    }

    struct Value {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// In case of Insert, new_value will hold the value
      /// In case of Update, if the field is absent, the attribute should be removed/should be set to null.
      var value: String {
        get {return _storage._value ?? String()}
        set {_uniqueStorage()._value = newValue}
      }
      /// Returns true if `value` has been explicitly set.
      var hasValue: Bool {return _storage._value != nil}
      /// Clears the value of `value`. Subsequent reads from it will return its default value.
      mutating func clearValue() {_storage._value = nil}

      /// Absent field means that the attribute is absent and/or null.
      var oldValue: String {
        get {return _storage._oldValue ?? String()}
        set {_uniqueStorage()._oldValue = newValue}
      }
      /// Returns true if `oldValue` has been explicitly set.
      var hasOldValue: Bool {return _storage._oldValue != nil}
      /// Clears the value of `oldValue`. Subsequent reads from it will return its default value.
      mutating func clearOldValue() {_storage._oldValue = nil}

      /// maintains the fields that needs to be deleted from the message mentioned in "fields" variable
      var deleteData: String {
        get {return _storage._deleteData ?? String()}
        set {_uniqueStorage()._deleteData = newValue}
      }
      /// Returns true if `deleteData` has been explicitly set.
      var hasDeleteData: Bool {return _storage._deleteData != nil}
      /// Clears the value of `deleteData`. Subsequent reads from it will return its default value.
      mutating func clearDeleteData() {_storage._deleteData = nil}

      /// if true, this will replace the current data present in the message with the
      /// json string present in "value" field.
      var replace: Bool {
        get {return _storage._replace ?? false}
        set {_uniqueStorage()._replace = newValue}
      }
      /// Returns true if `replace` has been explicitly set.
      var hasReplace: Bool {return _storage._replace != nil}
      /// Clears the value of `replace`. Subsequent reads from it will return its default value.
      mutating func clearReplace() {_storage._replace = nil}

      /// unique id, can be used for insert operation
      var ids: [String] {
        get {return _storage._ids}
        set {_uniqueStorage()._ids = newValue}
      }

      var inBytes: DocumentContentOperation.Component.Value.InBytes {
        get {return _storage._inBytes ?? DocumentContentOperation.Component.Value.InBytes()}
        set {_uniqueStorage()._inBytes = newValue}
      }
      /// Returns true if `inBytes` has been explicitly set.
      var hasInBytes: Bool {return _storage._inBytes != nil}
      /// Clears the value of `inBytes`. Subsequent reads from it will return its default value.
      mutating func clearInBytes() {_storage._inBytes = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      struct InBytes {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        var value: Data {
          get {return _value ?? SwiftProtobuf.Internal.emptyData}
          set {_value = newValue}
        }
        /// Returns true if `value` has been explicitly set.
        var hasValue: Bool {return self._value != nil}
        /// Clears the value of `value`. Subsequent reads from it will return its default value.
        mutating func clearValue() {self._value = nil}

        var oldValue: Data {
          get {return _oldValue ?? SwiftProtobuf.Internal.emptyData}
          set {_oldValue = newValue}
        }
        /// Returns true if `oldValue` has been explicitly set.
        var hasOldValue: Bool {return self._oldValue != nil}
        /// Clears the value of `oldValue`. Subsequent reads from it will return its default value.
        mutating func clearOldValue() {self._oldValue = nil}

        var deleteData: Data {
          get {return _deleteData ?? SwiftProtobuf.Internal.emptyData}
          set {_deleteData = newValue}
        }
        /// Returns true if `deleteData` has been explicitly set.
        var hasDeleteData: Bool {return self._deleteData != nil}
        /// Clears the value of `deleteData`. Subsequent reads from it will return its default value.
        mutating func clearDeleteData() {self._deleteData = nil}

        var unknownFields = SwiftProtobuf.UnknownStorage()

        init() {}

        fileprivate var _value: Data? = nil
        fileprivate var _oldValue: Data? = nil
        fileprivate var _deleteData: Data? = nil
      }

      init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    struct Custom {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension DocumentDeltas: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DocumentDeltas"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delta"),
    2: .same(proto: "lastSavedVersion"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.delta) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.delta)
      case 2: try decoder.decodeSingularInt32Field(value: &self._lastSavedVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.delta.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.delta, fieldNumber: 1)
    }
    if let v = self._lastSavedVersion {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: DocumentDeltas) -> Bool {
    if self.delta != other.delta {return false}
    if self._lastSavedVersion != other._lastSavedVersion {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DocumentDelta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DocumentDelta"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "docOp"),
  ]

  public var isInitialized: Bool {
    if self._version == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.docOp) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self._version)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.docOp)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._version {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 1)
    }
    if !self.docOp.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.docOp, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: DocumentDelta) -> Bool {
    if self._version != other._version {return false}
    if self.docOp != other.docOp {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DocumentOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DocumentOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mutateDocument"),
  ]

  fileprivate class _StorageClass {
    var _mutateDocument: DocumentOperation.MutateDocument? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mutateDocument = source._mutateDocument
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mutateDocument, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._mutateDocument)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mutateDocument {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: DocumentOperation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._mutateDocument != other_storage._mutateDocument {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DocumentOperation.MutateDocument: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = DocumentOperation.protoMessageName + ".MutateDocument"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mDocId"),
    2: .same(proto: "contentOp"),
  ]

  fileprivate class _StorageClass {
    var _mDocID: String? = nil
    var _contentOp: DocumentContentOperation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mDocID = source._mDocID
      _contentOp = source._contentOp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._mDocID == nil {return false}
      if _storage._contentOp == nil {return false}
      if let v = _storage._contentOp, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._mDocID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._contentOp)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mDocID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._contentOp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: DocumentOperation.MutateDocument) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._mDocID != other_storage._mDocID {return false}
        if _storage._contentOp != other_storage._contentOp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DocumentContentOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DocumentContentOperation"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "component"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.component) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.component)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.component.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.component, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: DocumentContentOperation) -> Bool {
    if self.component != other.component {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DocumentContentOperation.Component: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = DocumentContentOperation.protoMessageName + ".Component"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "opType"),
    2: .same(proto: "fields"),
    3: .same(proto: "value"),
    4: .same(proto: "custom"),
    5: .same(proto: "ni"),
  ]

  fileprivate class _StorageClass {
    var _opType: DocumentContentOperation.Component.OperationType? = nil
    var _fields: String? = nil
    var _value: DocumentContentOperation.Component.Value? = nil
    var _custom: DocumentContentOperation.Component.Custom? = nil
    var _ni: Int32? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _opType = source._opType
      _fields = source._fields
      _value = source._value
      _custom = source._custom
      _ni = source._ni
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._opType == nil {return false}
      if _storage._fields == nil {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._opType)
        case 2: try decoder.decodeSingularStringField(value: &_storage._fields)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._value)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._custom)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._ni)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._opType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._fields {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._custom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._ni {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: DocumentContentOperation.Component) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._opType != other_storage._opType {return false}
        if _storage._fields != other_storage._fields {return false}
        if _storage._value != other_storage._value {return false}
        if _storage._custom != other_storage._custom {return false}
        if _storage._ni != other_storage._ni {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DocumentContentOperation.Component.OperationType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "INSERT"),
    2: .same(proto: "UPDATE"),
    3: .same(proto: "DELETE"),
    4: .same(proto: "CUSTOM"),
    5: .same(proto: "REORDER"),
  ]
}

extension DocumentContentOperation.Component.Value: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = DocumentContentOperation.Component.protoMessageName + ".Value"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "oldValue"),
    3: .same(proto: "deleteData"),
    4: .same(proto: "replace"),
    5: .same(proto: "ids"),
    6: .same(proto: "inBytes"),
  ]

  fileprivate class _StorageClass {
    var _value: String? = nil
    var _oldValue: String? = nil
    var _deleteData: String? = nil
    var _replace: Bool? = nil
    var _ids: [String] = []
    var _inBytes: DocumentContentOperation.Component.Value.InBytes? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
      _oldValue = source._oldValue
      _deleteData = source._deleteData
      _replace = source._replace
      _ids = source._ids
      _inBytes = source._inBytes
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._value)
        case 2: try decoder.decodeSingularStringField(value: &_storage._oldValue)
        case 3: try decoder.decodeSingularStringField(value: &_storage._deleteData)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._replace)
        case 5: try decoder.decodeRepeatedStringField(value: &_storage._ids)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._inBytes)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._value {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      }
      if let v = _storage._oldValue {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      }
      if let v = _storage._deleteData {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      }
      if let v = _storage._replace {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      }
      if !_storage._ids.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._ids, fieldNumber: 5)
      }
      if let v = _storage._inBytes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: DocumentContentOperation.Component.Value) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._value != other_storage._value {return false}
        if _storage._oldValue != other_storage._oldValue {return false}
        if _storage._deleteData != other_storage._deleteData {return false}
        if _storage._replace != other_storage._replace {return false}
        if _storage._ids != other_storage._ids {return false}
        if _storage._inBytes != other_storage._inBytes {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DocumentContentOperation.Component.Value.InBytes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = DocumentContentOperation.Component.Value.protoMessageName + ".InBytes"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "value"),
    2: .same(proto: "oldValue"),
    3: .same(proto: "deleteData"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self._value)
      case 2: try decoder.decodeSingularBytesField(value: &self._oldValue)
      case 3: try decoder.decodeSingularBytesField(value: &self._deleteData)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._value {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    }
    if let v = self._oldValue {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    }
    if let v = self._deleteData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: DocumentContentOperation.Component.Value.InBytes) -> Bool {
    if self._value != other._value {return false}
    if self._oldValue != other._oldValue {return false}
    if self._deleteData != other._deleteData {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension DocumentContentOperation.Component.Custom: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = DocumentContentOperation.Component.protoMessageName + ".Custom"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: DocumentContentOperation.Component.Custom) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
