// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Category.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Category {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var iconType: Category.IconType {
    get {return _iconType ?? .salary}
    set {_iconType = newValue}
  }
  /// Returns true if `iconType` has been explicitly set.
  var hasIconType: Bool {return self._iconType != nil}
  /// Clears the value of `iconType`. Subsequent reads from it will return its default value.
  mutating func clearIconType() {self._iconType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum IconType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case salary // = 0
    case vehicleAndTransport // = 1
    case household // = 2
    case shopping // = 3
    case phone // = 4
    case entertainment // = 5
    case medicine // = 6
    case investment // = 7
    case investmentReturn // = 8
    case tax // = 9
    case insurance // = 10
    case foodAndDrinks // = 11
    case misc // = 12
    case transfer // = 13

    init() {
      self = .salary
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .salary
      case 1: self = .vehicleAndTransport
      case 2: self = .household
      case 3: self = .shopping
      case 4: self = .phone
      case 5: self = .entertainment
      case 6: self = .medicine
      case 7: self = .investment
      case 8: self = .investmentReturn
      case 9: self = .tax
      case 10: self = .insurance
      case 11: self = .foodAndDrinks
      case 12: self = .misc
      case 13: self = .transfer
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .salary: return 0
      case .vehicleAndTransport: return 1
      case .household: return 2
      case .shopping: return 3
      case .phone: return 4
      case .entertainment: return 5
      case .medicine: return 6
      case .investment: return 7
      case .investmentReturn: return 8
      case .tax: return 9
      case .insurance: return 10
      case .foodAndDrinks: return 11
      case .misc: return 12
      case .transfer: return 13
      }
    }

  }

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _iconType: Category.IconType? = nil
}

#if swift(>=4.2)

extension Category.IconType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Category: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Category"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "iconType"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    if self._iconType == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularEnumField(value: &self._iconType)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._iconType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Category) -> Bool {
    if self._name != other._name {return false}
    if self._iconType != other._iconType {return false}
    if self.unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Category.IconType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SALARY"),
    1: .same(proto: "VEHICLE_AND_TRANSPORT"),
    2: .same(proto: "HOUSEHOLD"),
    3: .same(proto: "SHOPPING"),
    4: .same(proto: "PHONE"),
    5: .same(proto: "ENTERTAINMENT"),
    6: .same(proto: "MEDICINE"),
    7: .same(proto: "INVESTMENT"),
    8: .same(proto: "INVESTMENT_RETURN"),
    9: .same(proto: "TAX"),
    10: .same(proto: "INSURANCE"),
    11: .same(proto: "FOOD_AND_DRINKS"),
    12: .same(proto: "MISC"),
    13: .same(proto: "TRANSFER"),
  ]
}
