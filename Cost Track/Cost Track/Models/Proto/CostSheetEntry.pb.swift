// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CostSheetEntry.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CostSheetEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: EntryType {
    get {return _storage._type ?? .income}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {_uniqueStorage()._type = nil}

  var amount: Float {
    get {return _storage._amount ?? 0}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {_uniqueStorage()._amount = nil}

  var category: Category {
    get {return _storage._category ?? Category()}
    set {_uniqueStorage()._category = newValue}
  }
  /// Returns true if `category` has been explicitly set.
  var hasCategory: Bool {return _storage._category != nil}
  /// Clears the value of `category`. Subsequent reads from it will return its default value.
  mutating func clearCategory() {_uniqueStorage()._category = nil}

  var image: Data {
    get {return _storage._image ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {_uniqueStorage()._image = nil}

  var placeID: String {
    get {return _storage._placeID ?? String()}
    set {_uniqueStorage()._placeID = newValue}
  }
  /// Returns true if `placeID` has been explicitly set.
  var hasPlaceID: Bool {return _storage._placeID != nil}
  /// Clears the value of `placeID`. Subsequent reads from it will return its default value.
  mutating func clearPlaceID() {_uniqueStorage()._placeID = nil}

  var date: Data {
    get {return _storage._date ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {_uniqueStorage()._date = nil}

  var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  var id: String {
    get {return _storage._id ?? String()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var transferCostSheetID: String {
    get {return _storage._transferCostSheetID ?? String()}
    set {_uniqueStorage()._transferCostSheetID = newValue}
  }
  /// Returns true if `transferCostSheetID` has been explicitly set.
  var hasTransferCostSheetID: Bool {return _storage._transferCostSheetID != nil}
  /// Clears the value of `transferCostSheetID`. Subsequent reads from it will return its default value.
  mutating func clearTransferCostSheetID() {_uniqueStorage()._transferCostSheetID = nil}

  var transferEntryID: String {
    get {return _storage._transferEntryID ?? String()}
    set {_uniqueStorage()._transferEntryID = newValue}
  }
  /// Returns true if `transferEntryID` has been explicitly set.
  var hasTransferEntryID: Bool {return _storage._transferEntryID != nil}
  /// Clears the value of `transferEntryID`. Subsequent reads from it will return its default value.
  mutating func clearTransferEntryID() {_uniqueStorage()._transferEntryID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CostSheetEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CostSheetEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "amount"),
    3: .same(proto: "category"),
    4: .same(proto: "image"),
    5: .same(proto: "placeId"),
    6: .same(proto: "date"),
    7: .same(proto: "description"),
    8: .same(proto: "id"),
    9: .same(proto: "transferCostSheetId"),
    10: .same(proto: "transferEntryId"),
  ]

  fileprivate class _StorageClass {
    var _type: EntryType? = nil
    var _amount: Float? = nil
    var _category: Category? = nil
    var _image: Data? = nil
    var _placeID: String? = nil
    var _date: Data? = nil
    var _description_p: String? = nil
    var _id: String? = nil
    var _transferCostSheetID: String? = nil
    var _transferEntryID: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _amount = source._amount
      _category = source._category
      _image = source._image
      _placeID = source._placeID
      _date = source._date
      _description_p = source._description_p
      _id = source._id
      _transferCostSheetID = source._transferCostSheetID
      _transferEntryID = source._transferEntryID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type == nil {return false}
      if _storage._amount == nil {return false}
      if _storage._category == nil {return false}
      if _storage._date == nil {return false}
      if _storage._id == nil {return false}
      if let v = _storage._category, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularFloatField(value: &_storage._amount)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._category)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._image)
        case 5: try decoder.decodeSingularStringField(value: &_storage._placeID)
        case 6: try decoder.decodeSingularBytesField(value: &_storage._date)
        case 7: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 8: try decoder.decodeSingularStringField(value: &_storage._id)
        case 9: try decoder.decodeSingularStringField(value: &_storage._transferCostSheetID)
        case 10: try decoder.decodeSingularStringField(value: &_storage._transferEntryID)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._amount {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
      }
      if let v = _storage._category {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._image {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
      }
      if let v = _storage._placeID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      }
      if let v = _storage._date {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
      if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      }
      if let v = _storage._transferCostSheetID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      }
      if let v = _storage._transferEntryID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: CostSheetEntry) -> Bool {
    if self._storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((self._storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._type != other_storage._type {return false}
        if _storage._amount != other_storage._amount {return false}
        if _storage._category != other_storage._category {return false}
        if _storage._image != other_storage._image {return false}
        if _storage._placeID != other_storage._placeID {return false}
        if _storage._date != other_storage._date {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._transferCostSheetID != other_storage._transferCostSheetID {return false}
        if _storage._transferEntryID != other_storage._transferEntryID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if self.unknownFields != other.unknownFields {return false}
    return true
  }
}
