// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CostSheetEntry.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CostSheetEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: CostSheetEntry.EntryType {
    get {return _type ?? .income}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var amount: Float {
    get {return _amount ?? 0}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var category: CostSheetEntry.Category {
    get {return _category ?? .salary}
    set {_category = newValue}
  }
  /// Returns true if `category` has been explicitly set.
  var hasCategory: Bool {return self._category != nil}
  /// Clears the value of `category`. Subsequent reads from it will return its default value.
  mutating func clearCategory() {self._category = nil}

  var place: String {
    get {return _place ?? String()}
    set {_place = newValue}
  }
  /// Returns true if `place` has been explicitly set.
  var hasPlace: Bool {return self._place != nil}
  /// Clears the value of `place`. Subsequent reads from it will return its default value.
  mutating func clearPlace() {self._place = nil}

  var date: Data {
    get {return _date ?? SwiftProtobuf.Internal.emptyData}
    set {_date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return self._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {self._date = nil}

  var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum EntryType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case income // = 0
    case expense // = 1

    init() {
      self = .income
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .income
      case 1: self = .expense
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .income: return 0
      case .expense: return 1
      }
    }

  }

  enum Category: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case salary // = 0
    case vehicleAndTransport // = 1
    case household // = 2
    case home // = 3
    case shopping // = 4
    case phone // = 5
    case entertainment // = 6
    case medicine // = 7
    case investment // = 8
    case investmentReturn // = 9
    case tax // = 10
    case insurance // = 11
    case foodAndDrinks // = 12
    case misc // = 13
    case transfer // = 14

    init() {
      self = .salary
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .salary
      case 1: self = .vehicleAndTransport
      case 2: self = .household
      case 3: self = .home
      case 4: self = .shopping
      case 5: self = .phone
      case 6: self = .entertainment
      case 7: self = .medicine
      case 8: self = .investment
      case 9: self = .investmentReturn
      case 10: self = .tax
      case 11: self = .insurance
      case 12: self = .foodAndDrinks
      case 13: self = .misc
      case 14: self = .transfer
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .salary: return 0
      case .vehicleAndTransport: return 1
      case .household: return 2
      case .home: return 3
      case .shopping: return 4
      case .phone: return 5
      case .entertainment: return 6
      case .medicine: return 7
      case .investment: return 8
      case .investmentReturn: return 9
      case .tax: return 10
      case .insurance: return 11
      case .foodAndDrinks: return 12
      case .misc: return 13
      case .transfer: return 14
      }
    }

  }

  init() {}

  fileprivate var _type: CostSheetEntry.EntryType? = nil
  fileprivate var _amount: Float? = nil
  fileprivate var _category: CostSheetEntry.Category? = nil
  fileprivate var _place: String? = nil
  fileprivate var _date: Data? = nil
  fileprivate var _description_p: String? = nil
  fileprivate var _id: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CostSheetEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CostSheetEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "amount"),
    3: .same(proto: "category"),
    4: .same(proto: "place"),
    5: .same(proto: "date"),
    6: .same(proto: "description"),
    7: .same(proto: "id"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._amount == nil {return false}
    if self._category == nil {return false}
    if self._date == nil {return false}
    if self._id == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularFloatField(value: &self._amount)
      case 3: try decoder.decodeSingularEnumField(value: &self._category)
      case 4: try decoder.decodeSingularStringField(value: &self._place)
      case 5: try decoder.decodeSingularBytesField(value: &self._date)
      case 6: try decoder.decodeSingularStringField(value: &self._description_p)
      case 7: try decoder.decodeSingularStringField(value: &self._id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._amount {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._category {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    }
    if let v = self._place {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if let v = self._date {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
    }
    if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    }
    if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: CostSheetEntry) -> Bool {
    if self._type != other._type {return false}
    if self._amount != other._amount {return false}
    if self._category != other._category {return false}
    if self._place != other._place {return false}
    if self._date != other._date {return false}
    if self._description_p != other._description_p {return false}
    if self._id != other._id {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension CostSheetEntry.EntryType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INCOME"),
    1: .same(proto: "EXPENSE"),
  ]
}

extension CostSheetEntry.Category: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SALARY"),
    1: .same(proto: "VEHICLE_AND_TRANSPORT"),
    2: .same(proto: "HOUSEHOLD"),
    3: .same(proto: "HOME"),
    4: .same(proto: "SHOPPING"),
    5: .same(proto: "PHONE"),
    6: .same(proto: "ENTERTAINMENT"),
    7: .same(proto: "MEDICINE"),
    8: .same(proto: "INVESTMENT"),
    9: .same(proto: "INVESTMENT_RETURN"),
    10: .same(proto: "TAX"),
    11: .same(proto: "INSURANCE"),
    12: .same(proto: "FOOD_AND_DRINKS"),
    13: .same(proto: "MISC"),
    14: .same(proto: "TRANSFER"),
  ]
}
