// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CostSheetEntry.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CostSheetEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: CostSheetEntry.EntryType {
    get {return _storage._type ?? .income}
    set {_uniqueStorage()._type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return _storage._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {_uniqueStorage()._type = nil}

  var amount: Float {
    get {return _storage._amount ?? 0}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {_uniqueStorage()._amount = nil}

  var category: CostSheetEntry.Category {
    get {return _storage._category ?? .salary}
    set {_uniqueStorage()._category = newValue}
  }
  /// Returns true if `category` has been explicitly set.
  var hasCategory: Bool {return _storage._category != nil}
  /// Clears the value of `category`. Subsequent reads from it will return its default value.
  mutating func clearCategory() {_uniqueStorage()._category = nil}

  var place: Place {
    get {return _storage._place ?? Place()}
    set {_uniqueStorage()._place = newValue}
  }
  /// Returns true if `place` has been explicitly set.
  var hasPlace: Bool {return _storage._place != nil}
  /// Clears the value of `place`. Subsequent reads from it will return its default value.
  mutating func clearPlace() {_uniqueStorage()._place = nil}

  var date: Data {
    get {return _storage._date ?? SwiftProtobuf.Internal.emptyData}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {_uniqueStorage()._date = nil}

  var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  var id: String {
    get {return _storage._id ?? String()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum EntryType: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case income // = 0
    case expense // = 1

    init() {
      self = .income
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .income
      case 1: self = .expense
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .income: return 0
      case .expense: return 1
      }
    }

  }

  enum Category: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case salary // = 0
    case vehicleAndTransport // = 1
    case household // = 2
    case shopping // = 3
    case phone // = 4
    case entertainment // = 5
    case medicine // = 6
    case investment // = 7
    case investmentReturn // = 8
    case tax // = 9
    case insurance // = 10
    case foodAndDrinks // = 11
    case misc // = 12
    case transfer // = 13

    init() {
      self = .salary
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .salary
      case 1: self = .vehicleAndTransport
      case 2: self = .household
      case 3: self = .shopping
      case 4: self = .phone
      case 5: self = .entertainment
      case 6: self = .medicine
      case 7: self = .investment
      case 8: self = .investmentReturn
      case 9: self = .tax
      case 10: self = .insurance
      case 11: self = .foodAndDrinks
      case 12: self = .misc
      case 13: self = .transfer
      default: return nil
      }
    }

    var rawValue: Int {
      switch self {
      case .salary: return 0
      case .vehicleAndTransport: return 1
      case .household: return 2
      case .shopping: return 3
      case .phone: return 4
      case .entertainment: return 5
      case .medicine: return 6
      case .investment: return 7
      case .investmentReturn: return 8
      case .tax: return 9
      case .insurance: return 10
      case .foodAndDrinks: return 11
      case .misc: return 12
      case .transfer: return 13
      }
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension CostSheetEntry.EntryType: CaseIterable {
  // Support synthesized by the compiler.
}

extension CostSheetEntry.Category: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CostSheetEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CostSheetEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "amount"),
    3: .same(proto: "category"),
    4: .same(proto: "place"),
    5: .same(proto: "date"),
    6: .same(proto: "description"),
    7: .same(proto: "id"),
  ]

  fileprivate class _StorageClass {
    var _type: CostSheetEntry.EntryType? = nil
    var _amount: Float? = nil
    var _category: CostSheetEntry.Category? = nil
    var _place: Place? = nil
    var _date: Data? = nil
    var _description_p: String? = nil
    var _id: String? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _amount = source._amount
      _category = source._category
      _place = source._place
      _date = source._date
      _description_p = source._description_p
      _id = source._id
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type == nil {return false}
      if _storage._amount == nil {return false}
      if _storage._category == nil {return false}
      if _storage._date == nil {return false}
      if _storage._id == nil {return false}
      if let v = _storage._place, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularFloatField(value: &_storage._amount)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._place)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._date)
        case 6: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 7: try decoder.decodeSingularStringField(value: &_storage._id)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._type {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._amount {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
      }
      if let v = _storage._category {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      }
      if let v = _storage._place {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._date {
        try visitor.visitSingularBytesField(value: v, fieldNumber: 5)
      }
      if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      }
      if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: CostSheetEntry) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._place != rhs_storage._place {return false}
        if _storage._date != rhs_storage._date {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._id != rhs_storage._id {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension CostSheetEntry.EntryType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INCOME"),
    1: .same(proto: "EXPENSE"),
  ]
}

extension CostSheetEntry.Category: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SALARY"),
    1: .same(proto: "VEHICLE_AND_TRANSPORT"),
    2: .same(proto: "HOUSEHOLD"),
    3: .same(proto: "SHOPPING"),
    4: .same(proto: "PHONE"),
    5: .same(proto: "ENTERTAINMENT"),
    6: .same(proto: "MEDICINE"),
    7: .same(proto: "INVESTMENT"),
    8: .same(proto: "INVESTMENT_RETURN"),
    9: .same(proto: "TAX"),
    10: .same(proto: "INSURANCE"),
    11: .same(proto: "FOOD_AND_DRINKS"),
    12: .same(proto: "MISC"),
    13: .same(proto: "TRANSFER"),
  ]
}
