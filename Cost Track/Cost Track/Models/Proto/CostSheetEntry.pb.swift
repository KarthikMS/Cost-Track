// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CostSheetEntry.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CostSheetEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: EntryType {
    get {return _type ?? .income}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var amount: Float {
    get {return _amount ?? 0}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var categoryID: String {
    get {return _categoryID ?? String()}
    set {_categoryID = newValue}
  }
  /// Returns true if `categoryID` has been explicitly set.
  var hasCategoryID: Bool {return self._categoryID != nil}
  /// Clears the value of `categoryID`. Subsequent reads from it will return its default value.
  mutating func clearCategoryID() {self._categoryID = nil}

  var image: Data {
    get {return _image ?? SwiftProtobuf.Internal.emptyData}
    set {_image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return self._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {self._image = nil}

  var placeID: String {
    get {return _placeID ?? String()}
    set {_placeID = newValue}
  }
  /// Returns true if `placeID` has been explicitly set.
  var hasPlaceID: Bool {return self._placeID != nil}
  /// Clears the value of `placeID`. Subsequent reads from it will return its default value.
  mutating func clearPlaceID() {self._placeID = nil}

  var date: Data {
    get {return _date ?? SwiftProtobuf.Internal.emptyData}
    set {_date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return self._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {self._date = nil}

  var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var transferCostSheetID: String {
    get {return _transferCostSheetID ?? String()}
    set {_transferCostSheetID = newValue}
  }
  /// Returns true if `transferCostSheetID` has been explicitly set.
  var hasTransferCostSheetID: Bool {return self._transferCostSheetID != nil}
  /// Clears the value of `transferCostSheetID`. Subsequent reads from it will return its default value.
  mutating func clearTransferCostSheetID() {self._transferCostSheetID = nil}

  var transferEntryID: String {
    get {return _transferEntryID ?? String()}
    set {_transferEntryID = newValue}
  }
  /// Returns true if `transferEntryID` has been explicitly set.
  var hasTransferEntryID: Bool {return self._transferEntryID != nil}
  /// Clears the value of `transferEntryID`. Subsequent reads from it will return its default value.
  mutating func clearTransferEntryID() {self._transferEntryID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: EntryType? = nil
  fileprivate var _amount: Float? = nil
  fileprivate var _categoryID: String? = nil
  fileprivate var _image: Data? = nil
  fileprivate var _placeID: String? = nil
  fileprivate var _date: Data? = nil
  fileprivate var _description_p: String? = nil
  fileprivate var _id: String? = nil
  fileprivate var _transferCostSheetID: String? = nil
  fileprivate var _transferEntryID: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CostSheetEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CostSheetEntry"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "amount"),
    3: .same(proto: "categoryId"),
    4: .same(proto: "image"),
    5: .same(proto: "placeId"),
    6: .same(proto: "date"),
    7: .same(proto: "description"),
    8: .same(proto: "id"),
    9: .same(proto: "transferCostSheetId"),
    10: .same(proto: "transferEntryId"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._amount == nil {return false}
    if self._categoryID == nil {return false}
    if self._date == nil {return false}
    if self._id == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._type)
      case 2: try decoder.decodeSingularFloatField(value: &self._amount)
      case 3: try decoder.decodeSingularStringField(value: &self._categoryID)
      case 4: try decoder.decodeSingularBytesField(value: &self._image)
      case 5: try decoder.decodeSingularStringField(value: &self._placeID)
      case 6: try decoder.decodeSingularBytesField(value: &self._date)
      case 7: try decoder.decodeSingularStringField(value: &self._description_p)
      case 8: try decoder.decodeSingularStringField(value: &self._id)
      case 9: try decoder.decodeSingularStringField(value: &self._transferCostSheetID)
      case 10: try decoder.decodeSingularStringField(value: &self._transferEntryID)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._amount {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._categoryID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._image {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 4)
    }
    if let v = self._placeID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    }
    if let v = self._date {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
    }
    if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    }
    if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }
    if let v = self._transferCostSheetID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    }
    if let v = self._transferEntryID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CostSheetEntry, rhs: CostSheetEntry) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs._categoryID != rhs._categoryID {return false}
    if lhs._image != rhs._image {return false}
    if lhs._placeID != rhs._placeID {return false}
    if lhs._date != rhs._date {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._id != rhs._id {return false}
    if lhs._transferCostSheetID != rhs._transferCostSheetID {return false}
    if lhs._transferEntryID != rhs._transferEntryID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
