// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: CostSheet.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct CostSheet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var initialBalance: Float {
    get {return _initialBalance ?? 0}
    set {_initialBalance = newValue}
  }
  /// Returns true if `initialBalance` has been explicitly set.
  var hasInitialBalance: Bool {return self._initialBalance != nil}
  /// Clears the value of `initialBalance`. Subsequent reads from it will return its default value.
  mutating func clearInitialBalance() {self._initialBalance = nil}

  var includeInOverallTotal: Bool {
    get {return _includeInOverallTotal ?? false}
    set {_includeInOverallTotal = newValue}
  }
  /// Returns true if `includeInOverallTotal` has been explicitly set.
  var hasIncludeInOverallTotal: Bool {return self._includeInOverallTotal != nil}
  /// Clears the value of `includeInOverallTotal`. Subsequent reads from it will return its default value.
  mutating func clearIncludeInOverallTotal() {self._includeInOverallTotal = nil}

  var groupID: String {
    get {return _groupID ?? String()}
    set {_groupID = newValue}
  }
  /// Returns true if `groupID` has been explicitly set.
  var hasGroupID: Bool {return self._groupID != nil}
  /// Clears the value of `groupID`. Subsequent reads from it will return its default value.
  mutating func clearGroupID() {self._groupID = nil}

  var entries: [CostSheetEntry] = []

  var lastModifiedDate: Data {
    get {return _lastModifiedDate ?? SwiftProtobuf.Internal.emptyData}
    set {_lastModifiedDate = newValue}
  }
  /// Returns true if `lastModifiedDate` has been explicitly set.
  var hasLastModifiedDate: Bool {return self._lastModifiedDate != nil}
  /// Clears the value of `lastModifiedDate`. Subsequent reads from it will return its default value.
  mutating func clearLastModifiedDate() {self._lastModifiedDate = nil}

  var createdOnDate: Data {
    get {return _createdOnDate ?? SwiftProtobuf.Internal.emptyData}
    set {_createdOnDate = newValue}
  }
  /// Returns true if `createdOnDate` has been explicitly set.
  var hasCreatedOnDate: Bool {return self._createdOnDate != nil}
  /// Clears the value of `createdOnDate`. Subsequent reads from it will return its default value.
  mutating func clearCreatedOnDate() {self._createdOnDate = nil}

  var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _initialBalance: Float? = nil
  fileprivate var _includeInOverallTotal: Bool? = nil
  fileprivate var _groupID: String? = nil
  fileprivate var _lastModifiedDate: Data? = nil
  fileprivate var _createdOnDate: Data? = nil
  fileprivate var _id: String? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension CostSheet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "CostSheet"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "initialBalance"),
    3: .same(proto: "includeInOverallTotal"),
    4: .same(proto: "groupId"),
    5: .same(proto: "entries"),
    6: .same(proto: "lastModifiedDate"),
    7: .same(proto: "createdOnDate"),
    8: .same(proto: "id"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    if self._initialBalance == nil {return false}
    if self._includeInOverallTotal == nil {return false}
    if self._groupID == nil {return false}
    if self._lastModifiedDate == nil {return false}
    if self._createdOnDate == nil {return false}
    if self._id == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.entries) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularFloatField(value: &self._initialBalance)
      case 3: try decoder.decodeSingularBoolField(value: &self._includeInOverallTotal)
      case 4: try decoder.decodeSingularStringField(value: &self._groupID)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.entries)
      case 6: try decoder.decodeSingularBytesField(value: &self._lastModifiedDate)
      case 7: try decoder.decodeSingularBytesField(value: &self._createdOnDate)
      case 8: try decoder.decodeSingularStringField(value: &self._id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._initialBalance {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    }
    if let v = self._includeInOverallTotal {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    }
    if let v = self._groupID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 5)
    }
    if let v = self._lastModifiedDate {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 6)
    }
    if let v = self._createdOnDate {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 7)
    }
    if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: CostSheet, rhs: CostSheet) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._initialBalance != rhs._initialBalance {return false}
    if lhs._includeInOverallTotal != rhs._includeInOverallTotal {return false}
    if lhs._groupID != rhs._groupID {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs._lastModifiedDate != rhs._lastModifiedDate {return false}
    if lhs._createdOnDate != rhs._createdOnDate {return false}
    if lhs._id != rhs._id {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
